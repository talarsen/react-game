{"version":3,"sources":["components/GuessesRemaining.js","components/UserGuessCheck.js","App.js","reportWebVitals.js","index.js"],"names":["GuessesRemaining","props","numToGo","numOfGuesses","className","secretNumber","Math","floor","random","console","log","UserGuessCheck","userResults","Number","isNaN","App","useState","inputValue","updateValue","setGuesses","value","onChange","e","target","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAiCeA,MA5Bf,SAA0BC,GAExB,IAAMC,EAAU,EAAID,EAAME,aAa1B,OAEI,mBAAGC,UAAU,cAAb,SAZa,IAAZF,EACK,YAAN,OAAmBA,EAAnB,eACSA,EAAU,GAAKA,GAAW,EAC/B,YAAN,OAAmBA,EAAnB,iBAEQ,0DCTRG,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAEpDC,QAAQC,IAAIL,GACZ,IAqBeM,EArBM,SAACV,GAElB,IAAIW,EAAcC,OAAOZ,EAAMW,aAC/B,OAAIE,MAAMF,IACRH,QAAQC,IAAR,sDACO,sFAENL,IAAiBO,EAEX,8IAAgHP,EAAhH,OAENA,EAAeO,EAET,2DAENP,EAAeO,EAET,+DAFT,GCmBWG,MApCf,WAIE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAmCF,mBAAS,GAA5C,mBAAOb,EAAP,KAAqBgB,EAArB,KAEA,OACE,sBAAKf,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,2DACA,oBAAIA,UAAU,iBAAd,8DACA,uBAEEgB,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAAYI,EAAEC,OAAOH,UAIpB,IAAjBjB,EAAqB,4BAAI,OACzB,cAAC,EAAD,CAAgBS,YAAaK,EAAYd,aAAcA,IAExD,wBACEC,UAAU,cACVoB,KAAK,SACLC,QAAU,WAAON,EAAWhB,EAAa,GAAGM,QAAQC,IAAR,UAAeO,EAAf,gBAAiCd,KAH/E,mBAOA,qBAAKC,UAAY,mBAAjB,SACA,cAAC,EAAD,CAAkBD,aAAcA,UCzBvBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.306b42e9.chunk.js","sourcesContent":["import React from \"react\"\n//import CSS from \"../App.css\"\n\n\n\nfunction GuessesRemaining(props){\n\n  const numToGo = 5 - props.numOfGuesses\n  \n  let showGuesses = () => {\n    if(numToGo === 1){\n      return `You have ${numToGo} guess left`\n    } else if (numToGo > 1 && numToGo <= 5) {\n    return `You have ${numToGo} guesses left`\n    } else {\n      return `You have no more guesses left. Thank you for playing`\n    }\n\n  } \n\n  return (\n    \n      <p className=\"guessesLeft\">{showGuesses()}</p>\n    \n    \n  )\n\n}\n//gather the number of guesses and at each guess(increment)(setGuesses) display the number of guesses left\n//0 5 guesses remaining\n//1 guess and 4 togo\n//2 guesse and 3 togo\n\nexport default GuessesRemaining","import React from \"react\"\nimport '../App.css';\n\n\n\n// generate random number\nlet secretNumber = Math.floor(Math.random() * 20) + 1;\n\nconsole.log(secretNumber)\nlet UserGuessCheck = (props) => {\n    \n    let userResults = Number(props.userResults)\n    if (isNaN(userResults)){\n      console.log(`Please enter a number, your guess was not a number`)\n      return <p>\"Please enter a number, your guess was not a number\"</p>\n    } \n    if(secretNumber === userResults){\n      //console.log(secretNumber)\n      return <p>\"Congratulations! You're guessed the secret number. You should buy a lottery ticket! The secret number was ${secretNumber}!</p>\n    } \n    if(secretNumber < userResults){\n      //console.log(secretNumber)\n      return <p>\"Your guess was too high.\"</p>\n    } \n    if(secretNumber > userResults) {\n      //console.log(secretNumber)\n      return <p>\"Your guess was too low.\"</p> \n    }  \n}\n\nexport default UserGuessCheck","import React,{useState} from \"react\"\nimport './App.css';\nimport GuessesRemaining from \"./components/GuessesRemaining.js\" \nimport UserGuessCheck from \"./components/UserGuessCheck.js\" \n\n\n\nfunction App() {\n\n\n\n  const [inputValue, updateValue] = useState(\"\");\n  //const [results, setResults] = useState(\"\");\n  const [numOfGuesses, setGuesses] = useState(0)\n  //*first is the current value state\n  return (\n    <div className=\"App\">\n      <h1 className=\"headerText\">Welcome to Guess My Secret Number! Let's Play</h1>\n      <h3 className=\"userDirections\">Please enter a number between 1 and 20 inclusive</h3>\n      <input \n        //type=\"number\" \n        value={inputValue}\n        onChange={e => updateValue(e.target.value)}\n      />\n      \n  \n      {numOfGuesses === 0 ? <p>{null}</p> :\n       <UserGuessCheck userResults={inputValue} numOfGuesses={numOfGuesses} />}\n\n      <button \n        className=\"guessButton\"\n        type=\"submit\"\n        onClick ={() => {setGuesses(numOfGuesses+1);console.log(`${inputValue} and ${numOfGuesses}`)}}>\n        Guess</button>\n      {/* Need to get incrementing guesses working. Start at 0 and after 5 guesses reveal the secret number */}\n\n      <div className = \"guessesRemaining\">\n      <GuessesRemaining numOfGuesses={numOfGuesses} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}